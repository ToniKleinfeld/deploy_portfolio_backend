x-default-env: &default-env
  DEBUG: ${DEBUG}
  SECRET_KEY: ${SECRET_KEY}
  RELOAD_ENV: ${RELOAD_ENV}
  REDIS_HOST: ${REDIS_HOST}
  REDIS_LOCATION: ${REDIS_LOCATION}
  REDIS_PORT: ${REDIS_PORT}
  REDIS_DB: ${REDIS_DB}
  EMAIL_HOST: ${EMAIL_HOST}
  EMAIL_PORT: ${EMAIL_PORT}
  EMAIL_HOST_USER: ${EMAIL_HOST_USER}
  EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
  EMAIL_USE_TLS: ${EMAIL_USE_TLS}
  EMAIL_USE_SSL: ${EMAIL_USE_SSL}
  DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
  DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
  DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
  DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}

x-common-labels: &common-labels
  com.github.nginx-proxy.tls-port: "443"

networks:
  proxy:
  backend:

volumes:
  pgdata:
  redisdata:
  acme:
  vhost:
  html:
  dhparam:
  join_media:
  join_static:
  coderr_media:
  coderr_static:
  videoflix_media:
  videoflix_static:

services:
  # ---- Reverse Proxy + Let's Encrypt ----
  reverse-proxy:
    image: nginxproxy/nginx-proxy:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - acme:/etc/acme.sh
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/custom.conf:/etc/nginx/conf.d/custom.conf:ro
    networks: [proxy]

  acme-companion:
    image: nginxproxy/acme-companion
    restart: always
    environment:
      DEFAULT_EMAIL: ${EMAIL_ADMIN}
    volumes:
      - acme:/etc/acme.sh
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [proxy]
    depends_on: [reverse-proxy]

  # ---- PostgreSQL ----
  postgres:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./initdb/00-create-dbs-and-users.sql.tpl:/docker-entrypoint-initdb.d/00-create-dbs-and-users.sql.tpl:ro
      - ./initdb/render-init.sh:/docker-entrypoint-initdb.d/00-render-init.sh:ro
    networks: [backend]
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_PG_CPUS}
          memory: ${LIMIT_PG_MEM}

  # ---- Redis (eine Instanz) ----
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes" ]
    restart: always
    volumes:
      - redisdata:/data
    networks: [backend]
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_REDIS_CPUS}
          memory: ${LIMIT_REDIS_MEM}

  # ---- JOIN (Django/DRF) ----
  join:
    build:
      context: ../Backend-Join
      dockerfile: Dockerfile.deploy
    restart: always
    environment:
      <<: *default-env
      DB_HOST: ${DB_HOST} 
      DB_PORT: ${DB_PORT}
      DATABASE_URL: postgres://${JOIN_DB_USER}:${JOIN_DB_PASSWORD}@postgres:5432/${JOIN_DB}
      ALLOWED_HOSTS: ${JOIN_HOST}
      DB: ${JOIN_DB}
      DB_USER: ${JOIN_DB_USER}
      DB_PASSWORD: ${JOIN_DB_PASSWORD}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS_JOIN}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS_JOIN}
    volumes:
      - join_media:/app/media
      - join_static:/app/static
    depends_on:
      - postgres
    networks: [backend, proxy]
    labels:
      - "com.github.nginx-proxy.enable=true"
      - "VIRTUAL_HOST=${JOIN_HOST}"
      - "VIRTUAL_PORT=8000"
      - "LETSENCRYPT_HOST=${JOIN_HOST}"
      - "LETSENCRYPT_EMAIL=${EMAIL_ADMIN}"
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_JOIN_CPUS}
          memory: ${LIMIT_JOIN_MEM}

  # ---- CODERR (Django/DRF) ----
  coderr:
    build:
      context: ../backend.Coderr
      dockerfile: Dockerfile.deploy
    restart: always
    environment:
      <<: *default-env
      DB_HOST: ${DB_HOST} 
      DB_PORT: ${DB_PORT}
      DATABASE_URL: postgres://${CODERR_DB_USER}:${CODERR_DB_PASSWORD}@postgres:5432/${CODERR_DB}
      ALLOWED_HOSTS: ${CODERR_HOST}
      DB: ${CODERR_DB}
      DB_USER: ${CODERR_DB_USER}
      DB_PASSWORD: ${CODERR_DB_PASSWORD}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS_CODERR}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS_CODERR}
    volumes:
      - coderr_media:/app/media
      - coderr_static:/app/static
    depends_on:
      - postgres
    networks: [backend, proxy]
    labels:
      - "com.github.nginx-proxy.enable=true"
      - "VIRTUAL_HOST=${CODERR_HOST}"
      - "VIRTUAL_PORT=8000"
      - "LETSENCRYPT_HOST=${CODERR_HOST}"
      - "LETSENCRYPT_EMAIL=${EMAIL_ADMIN}"
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_CODERR_CPUS}
          memory: ${LIMIT_CODERR_MEM}

  # ---- VIDEOFLIX API (Django/DRF) ----
  videoflix:
    build:
      context: ../Videoflix
      dockerfile: Dockerfile.deploy
      args:
        FFMPEG_THREADS: ${FFMPEG_THREADS}
    restart: always
    environment:
      <<: *default-env
      DB_HOST: ${DB_HOST} 
      DB_PORT: ${DB_PORT}
      DATABASE_URL: postgres://${VIDEOFLIX_DB_USER}:${VIDEOFLIX_DB_PASSWORD}@postgres:5432/${VIDEOFLIX_DB}
      REDIS_URL: redis://redis:6379/${REDIS_DB}
      ALLOWED_HOSTS: ${VIDEOFLIX_HOST}
      FFMPEG_THREADS: ${FFMPEG_THREADS}
      DB: ${VIDEOFLIX_DB}
      DB_USER: ${VIDEOFLIX_DB_USER}
      DB_PASSWORD: ${VIDEOFLIX_DB_PASSWORD}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS_VIDEOFLIX}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS_VIDEOFLIX}
      FRONTEND_URL: ${FRONTEND_URL}
      SITE_URL: ${SITE_URL}
    volumes:
      - videoflix_media:/app/media
      - videoflix_static:/app/static
    depends_on:
      - postgres
      - redis
    networks: [backend, proxy]
    labels:
      - "com.github.nginx-proxy.enable=true"
      - "VIRTUAL_HOST=${VIDEOFLIX_HOST}"
      - "VIRTUAL_PORT=8000"
      - "LETSENCRYPT_HOST=${VIDEOFLIX_HOST}"
      - "LETSENCRYPT_EMAIL=${EMAIL_ADMIN}"
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_VIDEO_API_CPUS}
          memory: ${LIMIT_VIDEO_API_MEM}

  # ---- VIDEOFLIX Worker (django_rq) ----
  videoflix_worker:
    build:
      context: ../Videoflix
      dockerfile: Dockerfile.deploy
      args:
        FFMPEG_THREADS: ${FFMPEG_THREADS}
    restart: always
    environment:
      <<: *default-env
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DATABASE_URL: postgres://${VIDEOFLIX_DB_USER}:${VIDEOFLIX_DB_PASSWORD}@postgres:5432/${VIDEOFLIX_DB}
      REDIS_URL: redis://redis:6379/${REDIS_DB}
      ALLOWED_HOSTS: ${VIDEOFLIX_HOST}
      FFMPEG_THREADS: ${FFMPEG_THREADS}
      DB: ${VIDEOFLIX_DB}
      DB_USER: ${VIDEOFLIX_DB_USER}
      DB_PASSWORD: ${VIDEOFLIX_DB_PASSWORD}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS_VIDEOFLIX}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS_VIDEOFLIX}
      FRONTEND_URL: ${FRONTEND_URL}
      SITE_URL: ${SITE_URL}
    command: ["/app/worker.sh"]
    volumes:
      - videoflix_media:/app/media
    depends_on:
      - redis
      - postgres
    networks: [backend]
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_VIDEO_WORKER_CPUS}
          memory: ${LIMIT_VIDEO_WORKER_MEM}